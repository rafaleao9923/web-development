Building an enterprise

Building an Enterprise Application Software (EAS) is not an easy task to tackle. Thetask requires many different technical specialists all working together with a high levelof collaboration and preplanning to complete. Failure to perform adequate planningcan result in the project taking far more time and money than anticipated. Importantfeatures that your business model relies on could be left out of the equation, resulting indisruptions in everyday flow when a new system turns on.Enterprise-level software is geared toward satisfying the needs of a business as a whole. EAStakes all of the business logic of an organization and encompasses that into one system,thought of as a collection of many smaller subsystems. The software eliminates the need forpaperwork, reduces the steps involved in completing a task, and provides self-automated oreven artificially intelligent solutions to all kinds of problems in the world today. The websiteitself is only a small fraction of what the entire system actually comprises.Reasons to choose enterprise-level applicationsEnterprise-level software is usually thought of as a solution for organizations that alreadyhave a system in place and need to improve upon that. Whether or not that system issomething digital or a manual process, as in paper in filing cabinets, companies are alwayssearching for ways to simplify everyday tasks. Thus, enterprise-level software can consistof one or a collection of many different consumer-level applications. If you need morethan just a website and need a system that also takes on your business management tasks,you will likely need to scale up to the enterprise level. However, Django can still be usedfor the simplest of websites as well as large-scale projects beyond your wildest dreams.Applications can also be broken down into individual Django projects.
Let's say you have an organization with many departments and many users, all consistingof different permission roles. You need a way to connect them all so that they maygenerate and share reports, send notifications, store and manage customer/user data,create invoices, and work with other systems. Maybe you found that your organizationneeds to connect employees working remotely from home to be more productive andefficient at their job. The idea is that each user type will interact with the system in acompletely different way and even have different permission levels granting them access todifferent parts of your system.Generally speaking, when someone thinks enterprise level, they also think of somethingthat is unique and custom crafted. Such software is termed proprietary or closed-sourcesoftware and is not intended to be redistributed to the public by any means. However, notall EAS has to be proprietary; the distribution license can be set to anything you desireit to be. For example, the main system may be branded for one parent company and yetparts of the system may be branded for its subsidiaries, or copies can be distributed andrebranded per your license agreement. It may also be a good idea to speak with a technicallawyer to help write your software license agreement should your project(s) be extremelycomplex. Inviting the help of a technical lawyer at the beginning is a good way to preventlawsuits later on.Next, we will discuss some of the major types of enterprise systems.

Types of enterprise systems 

There are many different kinds of enterprise-level systems but we can consolidate them into six major categories, as follows: • Customer Relationship Management (CRM) • Enterprise Content Management (ECM) • Enterprise Asset Management (EAM) • Enterprise Resource Planning (ERP) • Supply Chain Management (SCM) • Enterprise Information System (EIS)

In this book, we will not actually be building any of these systems in their entirety. Instead,we will touch on the key Django programming concepts that, when combined, will getyou part of the way to the end zone. Not every concept can fit into this book but Django isfully capable of handling all of the features that each of these types of systems includes. Itis really up to your team to take on each of the rest of the concepts discussed in this bookand use them as another tool in your toolbox when building your system. Let's discussbriefly what each of these six major types of enterprise-level systems is and what they areprimarily used for.Customer Relationship ManagementCRM systems can typically be thought of as lead management, marketingcommunications, sales and inventory control, retail management, and so much more. Thesystems can be thought of as everything but the actual selling of products and services.They can even go further to include customer support and data analytics. These systemsare designed to develop better relationships with your business partners, customers andpotential customers, and anyone else in the equation.Enterprise Content ManagementAn ECM system can best be described as a system for people working in fields that dealwith creative and other intellectual property in some kind of way. Newspapers, magazines,and other news companies today have a great deal of content that they make availableto the internet on a daily basis. A Content Management System (CMS) provides aless technical and rapid way to build new pages and enter that content onto the web.Enterprise level just means you are adding more and more tools to your toolbox for yourorganization to use.Enterprise Asset ManagementIn an EAM system, products and inventory of all kinds can be entered into a system inthe same way as a CMS. This is often known as an e-commerce or shopping cart website.It's where you make your physical goods and assets available online. These systems allowthe tracking of inventory, project management, and document control, such as contractsand other legal documents. These systems may even consist of physical assets, such as realestate, automobiles, and music records.

Enterprise Resource PlanningAn ERP system is typically thought of as a way to manage people, the employees of thecompany, or what is commonly known as the Human Resources (HR) department. Thesystem can handle on-boarding and off-boarding procedures and store all personnelrecords. It could serve as a tool for project management, risk assessment, and recordkeeping. It can even serve as a knowledge base such as in the form of the FrequentlyAsked Questions (FAQs) area. A knowledge base is often used to point people to andhave them find common questions and answers in order to reduce the workload on yourstaff. These can also be used for training purposes, such as generating quizzes or askingtrivia questions and playing tutorials.Supply Chain ManagementSCM systems are similar to CRM and EAM systems. These are systems that manageinventory in every aspect of its development in the supply chain. These systems manageinventory on a national or even a global scale. They communicate with suppliers, connectto buyers, track packages, predict future supply orders, and may even automatically placethose orders. One way to look at the difference between a CRM and SCM system is that aCRM is mostly used for sales and marketing while an SCM is mostly used for productionand distribution. Both deal with products but in different ways and a large company or aconglomerate would need both.Enterprise Information SystemAn EIS is a system that generally combines a CRM and SCM system to handle a widerrange of business needs. An EIS may even integrate some or all of an ERP system andact as one giant central nervous system. Depending on the needs, this may consist ofnumerous databases and even numerous development projects all working together,comprising the brains of everything. These systems are known for storing and processinglarge volumes of data and connecting many different systems all together into one.We will now take a look at why people gravitate toward using Python and Django whenthey are building any of these enterprise-level systems. We'll see why it suits a variety ofprojects and what features it is best known for.

Why Python/Django?Python was created in 1991 by Guido van Rossum. He came up with the name Pythonafter reading the script for Monty Python's Flying Circus. The language was createdprimarily for the purpose of code readability and reliability. Python has been growingin popularity as the preferred backend framework for several years now. Python playsan important role in some very popular websites today, such as Google, NASA, Netflix,Spotify, Uber, and Dropbox, just to name a few. The Python language has becomedesirable among many developers for its ease of use, quickness to learn, and overalladaptability of the code written.Django came into existence in late 2003 by the newspaper publisher Lawrence Journal-World in Lawrence, Kansas. Similar to Python, it had one goal in mind: to create complexdatabase-driven websites in a simple and easy-to-read way. Along with readability, it wasdesigned with rapid development and a Don't Repeat Yourself (DRY) code structure inmind. Readability is why Python was chosen as Django's foundation for the framework.Django is best referred to as a backend framework because of how it works to build andmanage databases. It comes with many concepts built in surrounding the architecture ofwebsites, which makes it appealing to most web developers.Many people use Django today for their backend; but the framework can also serve asyour frontend. If you have ever used Shopify's Liquid template language, otherwise knownas Liquid syntax, or even ASP.NET's Razor syntax and how that is used in conjunctionwith C# .NET or Visual Basic .NET, you will notice commonalities with the Djangotemplate language, which is Django's method of using Python to build HTML files.Django uses context when the page is rendered to serve up user-generated content ordatabase-driven data onto that page. The template language syntax is fairly easy to readand quick to learn. Some examples of sites that use Django are Bitbucket, Instagram,National Geographic, Spotify, The Washington Post, and YouTube.Django's features include the following:• Caching framework• Data serialization• Extensibility• Form handling and validation• Scalability• Security• Template language• Testing framework

Of these features, extensibility means that Django is built to allow easy integration of otherthird-party services. Your developers can spend more time focusing on the specific needsof the project versus trying to figure out how to connect your project to a third-partyservicer's system. Django makes it easy to connect to virtually anything that exists today. Ifa functionality doesn't already come built in, there is usually a pip package for it.Django does not need to be used to build only websites. It can be used to build an APIthat stands as the central hub for anything, communicating with a REpresentationalState Transfer (REST) framework, which is a common architecture for standardizingcommunication between computer systems on the internet. From here, you can use anyvariety of common existing tools to build an iOS app for iPhones or even Android apps.Depending on your particular business requirements, deciding to tap into smartphonescan be beneficial in many ways. With somewhere around 85% of Americans owning asmartphone today, some companies might want to build an app where a user can installthat app on their personal phone (https://www.pewresearch.org/internet/fact-sheet/mobile/), versus the company having to purchase additional hardwareto distribute devices to all of their employees. APIs can be used for many other things aswell, from microservices to large-scale external web systems and databases.Personally, when it comes to using the Django template language and a JavaScript-basedframework such as React or Angular together, I would recommend against doing thatas it can get far too complex to work with. If you are using React, Angular, Vue.js, orHandlebars.js, to name a few, to work as your frontend, then Django would just serveas your backend where context is served up through your API. You can still keep yourfrontend and backend files in the same Django project folder.I have a few recommendations to help you choose. If you want to build an Android or iOSapp or a Single-Page App (SPA) website, use Django as an API on the backend. Then, forthe frontend, you can use a common JavaScript-based framework to build mobile apps.For multipage websites, just use the Django template language along with your context towork as your frontend. There are ways to build an SPA website without the use of React orAngular and just rely on Django alone, but even then, you will still need something suchas jQuery, AJAX, or vanilla JavaScript to help you process triggers and events that sendrequests to your API. I often resort to preloading my base .html file with jQuery, whichI will discuss how to do in Chapter 4, URLs, Views, and Templates. Many people prefer touse vanilla JavaScript so that they can write simple tasks without loading the entire jQuerylibrary. When it comes to adding bells and whistles on the frontend of things, in all of theprojects that I have worked on, I find that I can pretty much do everything that I need todo with just the Django template language and jQuery. I may be biased on this one but itis really simple to use. However, there are a lot of benefits of using ECMAScript, which isactually a set of international standards for building and compiling JavaScript, such as ES8,ES9, or ES10. Using ECMAScript is something I should be focusing on more in my projects.

Types of APIs An API is a means for two systems to communicate with each other through what are known as endpoints or a URL. We can categorize APIs into three main categories:
Open APIs Open APIs are open to the public and are sometimes referred to as an external API. Thistypically means there are no restrictions and anyone can be granted access. Sometimes,a simple registration or API key may be required before developers can gain accessbut they usually have the freedom to do with it as they wish. These APIs can be openbidirectionally as well, meaning the system is open for all GET, POST, PUT, PATCH, andDELETE requests coming to and from your system.Partner APIsPartner APIs are commonly found in business-to-business relationships. The generalpublic cannot gain access and permission is only granted to strategic partners who needto use your API in order to do business with you. Limitations can be defined dependingon your agreements with each party. These are fairly common in the world today whenbusiness mergers occur and your team is tasked with making two external systemscommunicate with each other. Sometimes, you have to build a central database in betweenthe two existing systems for various reasons, such as your business model is based ongranting access to your API in order for companies to sell their goods on your platform. Acommon example of this is the Amazon Selling Partner API (SP-API), which is used forselling goods on the Amazon Marketplace.Private APIsPrivate APIs are the most secure; these APIs are locked down because they are intendedto be used internally by that company or organization only. Large financial institutions orcorporate retail entities may use these to manage any aspect of their internal functions.The public and any other external sources may not be granted access unless a specificneed for it is warranted. Common examples are government organizations using APIs toconnect to systems that keep legal records and documents. Another example could be auniversity granting an educational department access to student and class records.By now, we have brushed up on what enterprise-level software is, in terms of what typesof enterprise-level systems exist today and how we can classify them. We also discussedhow Python and Django play a role in enterprise-level software. Now that we have learnedabout these various concepts, let's begin designing and planning for a project of our own.

----------------------------

Designing and planning
Every project, however big or small, needs a clear plan for what it is and how it will bebuilt. The larger the project, the more work should be put into the beginning phase ofpreparing for development. It is no surprise that enterprise-level development should alsorequire a great deal of preliminary work before actual development begins. Whether youare working for a company or are a company providing a solution to a client, you shouldhave a clear plan of what needs to be done. There is a lot of flexibility here based on factorssuch as cost, lack of developers, and deadlines. Prepare as much as possible and try tostick to the timelines that are set to keep you on track to completion. Remember that toolittle planning could come back to haunt you later.Developers should be given as much information as possible to help them understandwhat they are building. If your developers are not provided with enough documentation,blueprints, and other materials, then they will be left to make assumptions on their own,assumptions that later on are found in the testing and Quality Assurance (QA) phasesof development as bugs in your application. When this happens, you may discover that aparticular feature needs to be rebuilt, requiring major foundational changes that will takea great deal of time to refactor. If we think about something other than programming for amoment, such as building a house, we all know a foundation needs to be built before a teamcan frame the house. In turn, that foundation needs to be completed before a team canbuild the roof, wire up the electrics, install plumbing, and so on. You can't start building aroof without a frame, and you can't build a frame without a foundation to put it on.Let's discuss how to gather requirements for your project.

Requirements gathering
Gathering requirements is important to help document the build process and to allowboth parties, the developer and the owner of the software, to reference it at any timeduring development. This ability is essential in order to ensure things stay on track untilcompletion and are also completed on time. There should be an initial brainstormingphase to get a feel for the scope of the project. One good trick is to have all thestakeholders get together and debate the needs of the system, while you record any keypoints raised during the debate and include them in your requirements findings. Youshould always start by asking questions, and you should ask alternate questions fordifferent sets of people. After you have spoken to stakeholders, move on to directors,project managers, developers, and employees, known as end users. Interview as manydifferent types of users as possible. For extremely large entities, you could create aquestionnaire, distribute that questionnaire to a number of users, and then come to aconclusion based on the results.
Research and discovery
Find out whether this will be an internal, partner, or public project. If it is a partner project,you may have certain limitations based on the partner's specific needs. This is when weget into the difference between business requirements and functional requirements.Functional requirements are things such as determining what hosting plan and serverto live on, a backend framework, a frontend framework, and a set of pages. Businessrequirements, on the other hand, encompass the vision, goals, and objectives of thebusiness as a whole. They are specific to the needs of the organization or the partners theyare working with. The structure of a set of web pages or API endpoints may be defined bythe business model of that company versus some other logical reason that may otherwisebe chosen. Do your stakeholders have any goals, suggestions, or requests that you need toconsider? Here are 15 common questions that can help you formulate your set of questions.You shouldn't limit yourself to just these questions alone; use them for brainstorming:• Do you have business-specific requirements?• Why do you need a new system?• What does your current system prevent you from doing; are there any bottlenecks?• What new features would you like to add; do you need any improvements?• What old features would you like to keep or remove?• Who will you interact with in the system; what types of users and roles?• Will you need reporting, email messaging, or any other kind of notification system?